from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext

from bot_start import logger
from keyboards.user.user_keyboard import go_decode_settings_kb, choose_speakers_kb
from utils.states.user import FSMCreate


async def choose_count_speakers(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.set_state(FSMCreate.choose_count_speakers)
    logger.info(f'Speakers settings --> {call.from_user.id}')

    msg = await data['msg'].edit_text(
        text='<b>üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ <code>–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</code>. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. üòä</b>',
        reply_markup=await choose_speakers_kb()
    )
    await state.update_data(msg=msg)


async def get_count_speakers(message: types.Message, state: FSMContext):
    data = await state.get_data()

    try:
        int(message.text)
        msg = await data['msg'].edit_text(
            text=f'üëç <b>–Ø –∑–∞–ø–æ–º–Ω–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤:</b> <code>{message.text}</code>',
            reply_markup=await go_decode_settings_kb()
        )
        await state.update_data(count_speakers=message.text)
    except Exception as _ex:
        msg = await data['msg'].edit_text(
            text=f'üòî <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∏–∫–µ—Ä–æ–≤.</b>\n\n'
                 f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ‚ùóÔ∏è\n\n'
                 f'–ü—Ä–∏–º–µ—Ä –≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: <code>1, 2, 3, 4...</code>',
            reply_markup=await go_decode_settings_kb()
        )
        await state.set_state(FSMCreate.choose_count_speakers)
    await state.update_data(msg=msg)


async def auto_speakers(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    await state.set_state(FSMCreate.choose_count_speakers)
    msg = await data['msg'].edit_text(
        text='<b>‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç <code>¬∑–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ¬∑</code>. –ú—ã –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–∏–º —Å–∞–º–∏!</b>',
        reply_markup=await go_decode_settings_kb()
    )
    await state.update_data(msg=msg)


def register_handler(dp: Dispatcher):
    dp.callback_query.register(choose_count_speakers, F.data == 'count_speakers')
    dp.message.register(get_count_speakers, FSMCreate.choose_count_speakers, F.content_type == 'text',~F.text.startswith('/'))
    dp.callback_query.register(auto_speakers, F.data == 'auto_speakers')
