import os
from datetime import datetime

from aiogram import types, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import sessionmaker

from bot_start import bot
from integrations.database.models.minute import get_minute_db
from integrations.database.models.user import update_user_db, get_user_db
from keyboards.other.menu_keyboard import main_menu_kb
from src.config import Configuration
from utils.aiogram_helper import seconds_to_hms
from utils.states.user import FSMStart


async def start_command(message: types.Message, state: FSMContext, session_maker: sessionmaker):
    user_info = await get_user_db({'telegram_id': message.from_user.id}, session_maker)
    os.makedirs(f'media/{message.from_user.id}', exist_ok=True)
    chat_member = await bot.get_chat_member(-1002257040885, message.from_user.id)
    # logger.info(f"Start command received from {message.from_user.id}")
    # if chat_member.status in ['member', 'administrator', 'creator']:
    await update_user_db(message.from_user.id, {'last_active': datetime.now()}, session_maker)
    await message.answer_photo(
        photo=Configuration.main_photo_path,
        caption='<b>–ü–µ—Ä–µ–≤–æ–¥–∏–º –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò</b>\n\n'
                '–ë—ã—Å—Ç—Ä–æ, —Ç–æ—á–Ω–æ, –¥—ë—à–µ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n'
                '<b>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º?</b>\n'
                '‚úÖ –ë—ã—Å—Ç—Ä–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ\n'
                '‚úÖ 30 –º–∏–Ω—É—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏\n'
                '‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ <b>2GB</b>\n'
                '‚úÖ –†–∞–±–æ—Ç–∞–µ–º —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ YouTube, –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫, Google Drive\n'
                '‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n'
                '- –°–∞–º–º–∞—Ä–∏\n'
                '- –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏\n'
                '- –¢–∞–π–º-–∫–æ–¥—ã\n'
                '- –ü–µ—Ä–µ—á–µ–Ω—å –∑–∞–¥–∞—á\n'
                '- –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞\n',
        reply_markup=await main_menu_kb(user_info.is_admin)
    )
    await state.clear()
    await state.set_state(FSMStart.start)
    await state.update_data(lang='', count_speakers='', special_words='', path=[], duration=0, file_msg_id=[],
                            file_id=[], url_files=[], url_msg_id=[],
                            format_decoding='–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å —Ç–∞–π–º-–∫–æ–¥–∞–º–∏ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —Å–ø–∏–∫–µ—Ä–æ–≤',
                            format_summary=['–°–∞–º–º–∞—Ä–∏'])
    return
    # await message.answer(
    #     text="üì¢ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <a href='https://t.me/lifesync_ai'>[GBA AI]</a>,"
    #          " –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /start. –ú—ã –≤–∞—Å –∂–¥–µ–º! üòÉ"
    # )


async def main_menu(call: types.CallbackQuery, state: FSMContext, session_maker: sessionmaker):
    user_info = await get_user_db({'telegram_id': call.from_user.id}, session_maker)

    os.makedirs(f'media/{call.from_user.id}', exist_ok=True)
    # chat_member = await bot.get_chat_member(-1002257040885, call.from_user.id)
    # if chat_member.status in ['member', 'administrator', 'creator']:
    await update_user_db(call.from_user.id, {'last_active': datetime.now()}, session_maker)
    await call.message.answer_photo(
        photo=Configuration.main_photo_path,
        caption='<b>–ü–µ—Ä–µ–≤–æ–¥–∏–º –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò</b>\n\n'
                '–ë—ã—Å—Ç—Ä–æ, —Ç–æ—á–Ω–æ, –¥—ë—à–µ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n'
                '<b>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º?</b>\n'
                '‚úÖ –ë—ã—Å—Ç—Ä–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ\n'
                '‚úÖ 30 –º–∏–Ω—É—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏\n'
                '‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ <b>2GB</b>\n'
                '‚úÖ –†–∞–±–æ—Ç–∞–µ–º —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ YouTube, –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫, Google Drive\n'
                '‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n'
                '- –°–∞–º–º–∞—Ä–∏\n'
                '- –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏\n'
                '- –¢–∞–π–º-–∫–æ–¥—ã\n'
                '- –ü–µ—Ä–µ—á–µ–Ω—å –∑–∞–¥–∞—á\n'
                '- –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞\n',
        reply_markup=await main_menu_kb(user_info.is_admin)
    )
    await state.clear()
    await state.set_state(FSMStart.start)
    await state.update_data(lang='', count_speakers='', special_words='', path=[], duration=0, file_msg_id=[],
                            file_id=[], url_files=[], url_msg_id=[],
                            format_decoding='–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å —Ç–∞–π–º-–∫–æ–¥–∞–º–∏ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —Å–ø–∏–∫–µ—Ä–æ–≤',
                            format_summary=['–°–∞–º–º–∞—Ä–∏'])

    # await call.message.answer(
    #     text="üì¢ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <a href='https://t.me/lifesync_ai'>[GBA AI]</a>,"
    #          " –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /start. –ú—ã –≤–∞—Å –∂–¥–µ–º! üòÉ")


async def first_step_call(call: types.CallbackQuery, session_maker: sessionmaker, state: FSMContext):
    user_info = await get_minute_db({'telegram_id': call.from_user.id}, session_maker)
    os.makedirs(f'media/{call.from_user.id}', exist_ok=True)
    await update_user_db(call.from_user.id, {'last_active': datetime.now()}, session_maker)
    # chat_member = await bot.get_chat_member(-1002257040885, call.from_user.id)
    # if chat_member.status in ['member', 'administrator', 'creator']:
    await call.message.answer_photo(
        photo=Configuration.first_photo_url,
        caption=f'‚è≥ <b>–í–∞—à–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:</b> {await seconds_to_hms(user_info.remaining_seconds)}\n'
                '‚ùóÔ∏è –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∏–Ω—É—Ç, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –≤ –ú–µ–Ω—é.\n\n'
                '<b>–®–ê–ì 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</b>\n'
                'üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ <b>2GB</b>)\n'
                'üîó –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (YouTube, –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫, Google Drive)\n'
                '(–í–∞–∂–Ω–æ! –î–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç)'
    )
    await state.set_state(FSMStart.start)
    await state.update_data(lang='', count_speakers='', special_words='', path=[], duration=0, file_msg_id=[],
                            file_id=[], url_files=[], url_msg_id=[],
                            format_decoding='–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å —Ç–∞–π–º-–∫–æ–¥–∞–º–∏ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —Å–ø–∏–∫–µ—Ä–æ–≤',
                            format_summary=['–°–∞–º–º–∞—Ä–∏'])
    return
    # await call.message.answer(
    #     text="üì¢ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <a href='https://t.me/lifesync_ai'>[GBA AI]</a>,"
    #          " –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /start. –ú—ã –≤–∞—Å –∂–¥–µ–º! üòÉ")


async def first_step_message(message: types.Message, state: FSMContext, session_maker: sessionmaker):
    await state.set_state(FSMStart.start)
    user_info = await get_minute_db({'telegram_id': message.from_user.id}, session_maker)

    os.makedirs(f'media/{message.from_user.id}', exist_ok=True)
    await update_user_db(message.from_user.id, {'last_active': datetime.now()}, session_maker)
    # chat_member = await bot.get_chat_member(-1002257040885, message.from_user.id)
    # if chat_member.status in ['member', 'administrator', 'creator']:
    await message.answer_photo(
        photo=Configuration.first_photo_url,
        caption=f'‚è≥ <b>–í–∞—à–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:</b> {await seconds_to_hms(user_info.remaining_seconds)}\n'
                '‚ùóÔ∏è –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∏–Ω—É—Ç, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –≤ –ú–µ–Ω—é.\n\n'
                '<b>–®–ê–ì 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</b>\n'
                'üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ <b>2GB</b>)\n'
                'üîó –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (YouTube, –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫, Google Drive)\n'
                '(–í–∞–∂–Ω–æ! –î–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç)'
    )
    await state.set_state(FSMStart.start)
    await state.update_data(lang='', count_speakers='', special_words='', path=[], duration=0, file_msg_id=[],
                            file_id=[], url_files=[], url_msg_id=[],
                            format_decoding='–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å —Ç–∞–π–º-–∫–æ–¥–∞–º–∏ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —Å–ø–∏–∫–µ—Ä–æ–≤',
                            format_summary=['–°–∞–º–º–∞—Ä–∏'])

    # await message.answer(
    #     text="üì¢ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <a href='https://t.me/lifesync_ai'>[GBA AI]</a>,"
    #          " –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /start. –ú—ã –≤–∞—Å –∂–¥–µ–º! üòÉ")


def register_start_handler(dp: Dispatcher):
    dp.message.register(start_command, Command('start'))
    dp.callback_query.register(main_menu, F.data == 'main_menu')
    dp.callback_query.register(first_step_call, F.data == 'first_step')
    dp.message.register(first_step_message, Command('transcribe'))
