import os

from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import sessionmaker

from bot_start import bot, logger
from integrations.database.models.errors import create_error_db
from keyboards.other.menu_keyboard import decoding_menu_kb, other_settings_kb
from keyboards.user.user_keyboard import cancel_kb
from src.config import Configuration
from utils.aiogram_helper import seconds_to_hms, get_duration_document
from utils.google_drive import get_google_file
from utils.states.user import FSMStart
from utils.yandex_drive import get_yandex_file
from utils.youtube_drive import get_youtube_file
from utils.rutube_download import get_rutube_file

async def get_audio(message: types.Message, state: FSMContext, session_maker: sessionmaker):
    data = await state.get_data()
    if not os.path.exists(f'media/{message.from_user.id}'):
        os.makedirs(f'media/{message.from_user.id}', exist_ok=True)
    await message.answer('–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ ‚¨áÔ∏è')
    if message.video:
        logger.info(
            f'Get video | ID --> {message.from_user.id}')
        duration = message.video.duration
        data['file_id'].append(message.video.file_id)
        data['file_msg_id'].append(message.message_id)
        await state.update_data(file_msg_id=data['file_msg_id'], file_id=data['file_id'])
    elif message.audio:
        logger.info(
            f'Get audio | ID --> {message.from_user.id}')
        duration = message.audio.duration
        data['file_id'].append(message.audio.file_id)
        data['file_msg_id'].append(message.message_id)
        await state.update_data(file_msg_id=data['file_msg_id'], file_id=data['file_id'])
    elif message.video_note:
        logger.info(
            f'Get video note | ID --> {message.from_user.id}')
        duration = message.video_note.duration
        data['file_id'].append(message.video_note.file_id)
        data['file_msg_id'].append(message.message_id)
        await state.update_data(file_msg_id=data['file_msg_id'], file_id=data['file_id'])
    elif message.document:
        if message.document.file_name.split('.')[-1] in ['m4a', 'm4b', 'm4p', 'm4r', 'mp3', 'aac', 'ac3', 'wav',
                                                         'alac', 'flac', 'flv', 'wma', 'amr', 'mpga', 'ogg', 'oga',
                                                         'mogg', '8svx', 'aif', 'ape', 'au', 'dss', 'opus', 'qcp',
                                                         'tta', 'voc', 'wv', 'm4p', 'm4v', 'webm', 'mts', 'm2ts', 'ts',
                                                         'mov', 'mp2', 'mxf', 'mp4', 'MP3']:
            logger.info(
                f'Get Document | ID --> {message.from_user.id}')
            file = await bot.get_file(message.document.file_id,
                                      request_timeout=300)
            audio_file_path = file.file_path.replace('\\', '/')
            duration, status = await get_duration_document(audio_file_path)
            os.remove(audio_file_path)
            if status is False:
                await message.answer(
                    text='ü´¢ –£–ø—Å, —Å —Ñ–∞–π–ª–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å /start')
                await create_error_db(message.from_user.id,
                                      'get_duration_document', 'get_audio', str(duration), session_maker)
                return
            data['file_id'].append(message.document.file_id)
            data['file_msg_id'].append(message.message_id)
            await state.update_data(file_msg_id=data['file_msg_id'], file_id=data['file_id'])
        else:
            await message.answer(
                text="‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ <b>–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∏–º—Å—è!",
                reply_markup=await cancel_kb()
            )
            await state.set_state(FSMStart.start)
            return
    elif message.text:
        if 'http' in message.text:
            if 'google' in message.text:
                logger.info('Get google file | ID --> ' + str(message.from_user.id))
                file_path = await get_google_file(message.from_user.id, message.text)
            elif 'yandex' in message.text:
                logger.info('Get yandex file | ID --> ' + str(message.from_user.id))
                file_path = await get_yandex_file(message.from_user.id, message.text)
            elif 'rutube' in message.text:
                logger.info('Get rutube file | ID --> ' + str(message.from_user.id))
                file_path = await get_rutube_file(message.from_user.id, message.text)
            else:
                logger.info('Get youtube file | ID --> ' + str(message.from_user.id))
                file_path = await get_youtube_file(message.from_user.id, message.text)
            if file_path is None:
                await message.answer(
                    text='üòÖ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!',
                )
                await state.set_state(FSMStart.start)
                return
            logger.info('End download url | ID --> ' + str(message.from_user.id))
            duration, status = await get_duration_document(file_path)
            if status is False:
                await message.answer(
                    text='ü´¢ –£–ø—Å, —Å —Ñ–∞–π–ª–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å /start')
                await create_error_db(message.from_user.id,
                                      'get_url', 'get_audio', str(duration), session_maker)
                return
            data['url_files'].append(file_path)
            data['url_msg_id'].append(message.message_id)
            await state.update_data(url_msg_id=data['url_msg_id'], url_files=data['url_files'])
        else:
            await message.answer(
                text='üòÖ –ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∞–¥—Ä–µ—Å —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!',
            )
            await state.set_state(FSMStart.start)
            return
    else:
        logger.info(
            f'Get voice | ID --> {message.from_user.id}')
        duration = message.voice.duration
        data['file_id'].append(message.voice.file_id)
        data['file_msg_id'].append(message.message_id)
        await state.update_data(file_msg_id=data['file_msg_id'], file_id=data['file_id'])

    await state.update_data(duration=data['duration'] + duration)

    data = await state.get_data()
    if (len(data['file_id']) + len(data["url_files"])) > 1:
        text = f'–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ <code>{len(data["file_id"]) + len(data["url_files"])}</code> —Ñ–∞–π–ª–æ–≤/—Å—Å—ã–ª–æ–∫'
    else:
        text = '–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ <code>1</code> —Ñ–∞–π–ª/—Å—Å—ã–ª–∫—É'
    try:
        await data['msg'].delete()
    except Exception:
        pass
    msg = await message.answer_photo(
        photo=Configuration.second_photo_url,
        caption=f"‚è±Ô∏è –í–∞—à –∑–∞–ø—Ä–æ—Å\n"
                f"{text}\n\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –≤—Ä–µ–º—è: <code>{await seconds_to_hms(int(data['duration']))}</code>.\n"
                "‚è≥ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–π–º–µ—Ç <b>5-10 –º–∏–Ω—É—Ç</b>. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ, –º—ã —Ü–µ–Ω–∏–º —ç—Ç–æ! üíñ\n\n"
                '<b>–®–ê–ì 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏</b>\n'
                'üîπ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å—ë –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç.\n'
                'üîπ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏.',
        reply_markup=await decoding_menu_kb()
    )
    await state.update_data(msg=msg)


async def get_audio_call_data(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if len(data['file_id']) > 1:
        text = f'–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ <code>{len(data["file_id"])}</code> —Ñ–∞–π–ª–æ–≤'
    else:
        text = '–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ <code>1</code> —Ñ–∞–π–ª'
    try:
        await data['msg'].delete()
    except Exception:
        pass
    msg = await call.message.answer_photo(
        photo=Configuration.second_photo_url,
        caption=f"‚è±Ô∏è –í–∞—à –∑–∞–ø—Ä–æ—Å\n"
                f"{text}\n\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –≤—Ä–µ–º—è: <code>{await seconds_to_hms(int(data['duration']))}</code>.\n"
                "‚è≥ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–π–º–µ—Ç <b>5-10 –º–∏–Ω—É—Ç</b>. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ, –º—ã —Ü–µ–Ω–∏–º —ç—Ç–æ! üíñ\n\n"
                '<b>–®–ê–ì 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏</b>\n'
                'üîπ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å—ë –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç.\n'
                'üîπ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏.',
        reply_markup=await decoding_menu_kb()
    )
    await state.update_data(msg=msg)


async def get_more_audio(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(FSMStart.start)
    await call.message.answer(
        text='<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë 1 —Ñ–∞–π–ª/—Å—Å—ã–ª–∫—É</b>',
        reply_markup=await cancel_kb()
    )


async def other_options(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data['count_speakers'] == '':
        count_speakers = '–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'
    else:
        count_speakers = data['count_speakers']
    if data['special_words'] == '':
        special_words = '–ù–µ—Ç'
    else:
        special_words = data['special_words']
    summary = str(data["format_summary"]).replace("[", "").replace("]", "").replace("'", "")
    try:
        msg = await data['msg'].edit_text(
            text='<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>\n'
                 f'- üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤: <b>{count_speakers}</b>\n'
                 f'- üìù –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: <b>{special_words}</b>\n'
                 f'- üéôÔ∏è –§–æ—Ä–º–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: <b>{summary}</b>\n\n'
                 '‚úèÔ∏è –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:',
            reply_markup=await other_settings_kb()
        )
    except Exception:
        try:
            await data['msg'].delete()
        except Exception:
            pass
        msg = await call.message.answer(
            text='<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>\n'
                 f'- üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤: <b>{count_speakers}</b>\n'
                 f'- üìù –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: <b>{special_words}</b>\n'
                 f'- üéôÔ∏è –§–æ—Ä–º–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: <b>{summary}</b>\n\n'
                 '‚úèÔ∏è –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä:',
            reply_markup=await other_settings_kb()
        )
    await state.update_data(msg=msg)


def register_handler(dp: Dispatcher):
    dp.message.register(get_audio, FSMStart.start, F.content_type.in_(
        {'document', 'audio', 'video', 'voice', 'video_note', 'text'}), ~F.text.startswith('/'))
    dp.callback_query.register(get_audio_call_data, F.data == 'settings')
    dp.callback_query.register(get_more_audio, F.data == 'more_audio')
    dp.callback_query.register(other_options, F.data == 'other_options')
