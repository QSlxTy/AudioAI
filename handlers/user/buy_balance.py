from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import sessionmaker

from integrations.database.models.tariff import get_tariff_db
from keyboards.user.user_keyboard import accept_rules_kb, get_email_kb, payment_link_kb, back_menu_kb
from utils.states.user import FSMTariff
from utils.yookassa_api import create_yookassa_link, check_payment_yookassa


async def get_email(call: types.CallbackQuery, state: FSMContext, session_maker: sessionmaker):
    await state.set_state(FSMTariff.get_email)
    tariff_info = await get_tariff_db(call.data.split(":")[1], session_maker)
    await call.message.answer(
        text=f"üéâ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: <b>{tariff_info.tariff_name} –º–∏–Ω—É—Ç</b>.\n"
             f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{tariff_info.price} RUB</b>.\n\n"
             "‚úâÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Email, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —á–µ–∫. –ú—ã —É–∂–µ –≥–æ—Ç–æ–≤–∏–º –µ–≥–æ –¥–ª—è –≤–∞—Å! üòä",
        reply_markup=await get_email_kb()
    )
    await state.update_data(tariff=call.data.split(":")[1])


async def accept_create_call(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(
        text=f"üìù –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n\n"
             f'<a href= "https://docs.google.com/document/d/1G8AKLJWVZSRdO1Wp_enzu5bHpI_roaSqcgcSBq3h2n0/edit">[–û—Ñ–µ—Ä—Ç–∞]</a>\n'
             f'<a href= "https://docs.google.com/document/d/1MhSU_GgHO5nHynFXEPZm0GX8JYLonTRRaUmbyMlzA-4/edit?usp=sharing">[–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö]</a>\n\n'
             "–ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏!",
        disable_web_page_preview=True,
        reply_markup=await accept_rules_kb()
    )
    await state.update_data(email='kirya_kirya_228tk@mail.ru')


async def accept_create_message(message: types.Message, state: FSMContext):
    if '@' not in message.text:
        await message.answer(
            text="üòÖ –û–π, –∫–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ <b>–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Email</b>. –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! –ú—ã –≤–µ—Ä–∏–º –≤ –≤–∞—Å üí™.",
            reply_markup=await back_menu_kb()
        )
        await state.set_state(FSMTariff.get_email)

    else:
        await message.answer(
            text=f"üìù –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n\n"
                 f'<a href= "https://docs.google.com/document/d/1G8AKLJWVZSRdO1Wp_enzu5bHpI_roaSqcgcSBq3h2n0/edit">[–û—Ñ–µ—Ä—Ç–∞]</a>\n'
                 f'<a href= "https://docs.google.com/document/d/1MhSU_GgHO5nHynFXEPZm0GX8JYLonTRRaUmbyMlzA-4/edit?usp=sharing">[–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö]</a>\n\n'
                 "–ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏!",
            disable_web_page_preview=True,
            reply_markup=await accept_rules_kb()
        )
        await message.delete()
    await state.update_data(email=message.text)


async def create_payment_link(call: types.CallbackQuery, state: FSMContext, session_maker: sessionmaker):
    data = await state.get_data()
    tariff_info = await get_tariff_db(data['tariff'], session_maker)
    result = await create_yookassa_link(tariff_info.price, data['email'], call.from_user.id, data['tariff'],
                                        session_maker)
    if result is not None:
        await call.message.answer(
            text=f"üí≥ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–æ—Ç–æ–≤–∞!\n"
                 f"–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</b>.\n\n"
                 "‚úîÔ∏è –ò –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ <b>—Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã</b>, —á—Ç–æ–±—ã –≤—Å–µ –±—ã–ª–æ –Ω–∞ 100% –±–µ–∑–æ–ø–∞—Å–Ω–æ!",
            reply_markup=await payment_link_kb(result[0], 0)
        )
        await state.update_data(payment_id=result[1], url=result[0], seconds=int(int(tariff_info.tariff_name) * 60))
    else:
        await call.message.answer(
            text='‚ùóÔ∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã –≤–∞–º –ø–æ–º–æ–∂–µ–º! üòä',
            reply_markup=await back_menu_kb()
        )


async def check_payment(call: types.CallbackQuery, state: FSMContext, session_maker: sessionmaker):
    data = await state.get_data()
    result = await check_payment_yookassa(data['payment_id'], call.from_user.id, data['seconds'], session_maker)
    if result is True:
        await call.message.answer(
            text=f"üéâ –£—Ä–∞! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏ –≤–∞—à–∏ –º–∏–Ω—É—Ç—ã —É–∂–µ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å. üòä\n\n"
                 f"¬∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{call.from_user.username}</code>\n"
                 f"¬∑ ID –æ–ø–µ—Ä–∞—Ü–∏–∏: <code>{data['payment_id']}</code>\n"
                 f"¬∑ –¢–∞—Ä–∏—Ñ: <code>{data['tariff']} –º–∏–Ω—É—Ç</code>\n"
                 f"¬∑ –°—Ç–∞—Ç—É—Å: <b>–û–ø–ª–∞—á–µ–Ω–æ</b>",
            reply_markup=await back_menu_kb()
        )
    else:
        await call.message.answer(
            text="‚åõ –ú—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –∏–Ω–æ–≥–¥–∞ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ! üòä",
            reply_markup=await payment_link_kb(data['url'], data['payment_id'])
        )


def register_handler(dp: Dispatcher):
    dp.callback_query.register(get_email, F.data.startswith('choose_tariff'))
    dp.callback_query.register(accept_create_call, F.data == 'no_check')
    dp.message.register(accept_create_message, FSMTariff.get_email, F.content_type == 'text',~F.text.startswith('/'))
    dp.callback_query.register(create_payment_link, F.data == 'accept_create')
    dp.callback_query.register(check_payment, F.data == 'check_payment')
