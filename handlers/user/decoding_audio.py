import os
from datetime import datetime

from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from sqlalchemy.orm import sessionmaker

from bot_start import bot, logger
from integrations.database.models.action import create_action_db
from integrations.database.models.errors import create_error_db
from integrations.database.models.minute import get_minute_db, update_minute_db
from integrations.database.models.user import update_user_db
from keyboards.user.user_keyboard import back_menu_kb, choose_summary_kb, end_kb
from utils.GPT.GPT import create_theses_from_transcription
from utils.URL import upload_yadisk_file
from utils.aiogram_helper import seconds_to_hms
from utils.states.user import FSMStart


async def go_decoding(call: types.CallbackQuery, state: FSMContext, session_maker: sessionmaker):
    if not os.path.exists(f'media/{call.from_user.id}'):
        os.makedirs(f'media/{call.from_user.id}', exist_ok=True)
    user_info = await get_minute_db({'telegram_id': call.from_user.id}, session_maker)
    data = await state.get_data()
    if user_info.remaining_seconds < data['duration']:
        await call.message.answer(
            text=f"üôÅ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å: <code>{await seconds_to_hms(int(user_info.remaining_seconds))}</code> –º–∏–Ω—É—Ç.\n"
                 f"–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è: <code>{await seconds_to_hms(int(data['duration']))}</code> –º–∏–Ω—É—Ç.\n\n"
                 "–ù–µ –±–µ–¥–∞! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ <b>–±–∞–ª–∞–Ω—Å</b> –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üëâ /start, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ä–∞–±–æ—Ç—É. üí™"
        )

        for media_dir in os.listdir(f'media/{call.from_user.id}'):
            os.remove(f'media/{call.from_user.id}/{media_dir}')

        return
    if not data['format_summary']:
        await call.message.answer(
            text="‚öôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ <b>—Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏</b>, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. "
                 "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!",
            reply_markup=await choose_summary_kb(data['format_summary'])
        )
        return
    await call.message.answer(
        text="üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤. –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ! üôå"
    )

    for index, file_id in enumerate(data['file_id']):
        file = await bot.get_file(file_id,
                                  request_timeout=300)
        audio_file_path = file.file_path.replace('\\', '/')
        logger.info(f'Decode file path --> {audio_file_path}')
        logger.info(f'Start upload bucket --> {call.from_user.id}')
        decode_path = await upload_yadisk_file(file_id, audio_file_path, data['lang'],
                                               data['count_speakers'],
                                               data['special_words'],
                                               data['format_decoding'], call.from_user.id,
                                               session_maker)
        logger.info(f'End upload bucket --> {call.from_user.id}')
        if decode_path is None:
            await create_error_db(call.from_user.id, 'Decoding file error', 'decoding_audio',
                                  'Error for decoding audio',
                                  session_maker)
            await bot.send_message(
                chat_id=call.from_user.id,
                text=f"üòî –û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ñ–∞–π–ª–∞ <code>{index + 1}</code> –∏–∑ "
                     f"<code>{len(data['file_id'])}</code>.\n\n"
                     "–ù–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å! <b>–ú–∏–Ω—É—Ç—ã –∑–∞ —ç—Ç–æ—Ç —Ñ–∞–π–ª</b> —É–∂–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. "
                     "–ê –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏! üöÄ",
                reply_to_message_id=data['file_msg_id'][index],
                reply_markup=await back_menu_kb()
            )
            continue
        try:
            logger.info(f'Start Create theses --> {call.from_user.id}')
            list_doc = await create_theses_from_transcription(call.from_user.id, data['format_summary'], decode_path)
            logger.info(f'End Create theses --> {call.from_user.id}')
            await bot.send_message(
                chat_id=call.from_user.id,
                text=f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ <code>{index + 1}</code> –∏–∑ <code>{len(data['file_id'])}</code> –∑–∞–≤–µ—Ä—à–µ–Ω–∞! "
                     f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ.\n\n"
                     f'–û—Å—Ç–∞–ª–æ—Å—å —Ñ–∞–π–ª–æ–≤ <code>{len(data["file_id"]) - index - 1}</code>'
            )
            await bot.send_document(
                chat_id=call.from_user.id,
                document=FSInputFile(decode_path),
                caption='<b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ</b>',
                reply_to_message_id=data['file_msg_id'][index]
            )
            for summary_index, doc in enumerate(list_doc):
                await bot.send_document(
                    chat_id=call.from_user.id,
                    document=FSInputFile(doc),
                    caption=f'<b>–¢–µ–∑–∏—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>{data["format_summary"][summary_index]}</code></b>',
                    reply_to_message_id=data['file_msg_id'][index]
                )
                os.remove(doc)
            if index + 1 != len(data['file_id']):
                await bot.send_message(
                    chat_id=call.from_user.id,
                    text=f'<b>–ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ‚è±Ô∏è</b>'
                )
            await update_user_db(call.from_user.id, {'last_active': datetime.now()}, session_maker)
            await update_minute_db(call.from_user.id,
                                   {'remaining_seconds': user_info.remaining_seconds - data['duration']},
                                   session_maker)
            logger.info(f'End Decoding --> {call.from_user.id}')
        except Exception as _ex:
            logger.error(f'Summary error {_ex} --> go_summary_handler')
            await create_error_db(call.from_user.id, 'GPT file error', 'decoding_audio', str(_ex), session_maker)
            await bot.send_message(
                chat_id=call.from_user.id,
                text=f'üòî –û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∑–∏—Å–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ <code>{index + 1}</code> –∏–∑ '
                     f'<code>{len(data["file_id"])}</code>\n\n'
                     "–ù–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å! <b>–ú–∏–Ω—É—Ç—ã –∑–∞ —ç—Ç–æ—Ç —Ñ–∞–π–ª</b> —É–∂–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. "
                     "–ê –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏! üöÄ",
                reply_to_message_id=data['file_msg_id'][index],
                reply_markup=await back_menu_kb()
            )
        finally:
            try:
                os.remove(decode_path)
            except Exception as _ex:
                logger.error(f'File already been deleted --> go_summary_handler')

    for index, file_path in enumerate(data['url_files']):
        logger.info(f'Start decode urls --> {call.from_user.id}')
        logger.info(f'Start upload bucket --> {call.from_user.id}')
        decode_path = await upload_yadisk_file(
            file_path.split('/')[-1], file_path, data['lang'],
            data['count_speakers'],
            data['special_words'],
            data['format_decoding'], call.from_user.id,
            session_maker
        )
        logger.info(f'End upload bucket --> {call.from_user.id}')
        if decode_path is None:
            await create_error_db(call.from_user.id, 'Decoding url error', 'decoding_audio', 'Error for decoding audio',
                                  session_maker)
            await bot.send_message(
                chat_id=call.from_user.id,
                text=f"üòî –û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Å—Å—ã–ª–∫–∏ <code>{index + 1}</code>\n\n"
                     "–ù–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å! <b>–ú–∏–Ω—É—Ç—ã –∑–∞ —ç—Ç–æ—Ç —Ñ–∞–π–ª</b> —É–∂–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. "
                     "–ê –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏! üöÄ",
                reply_to_message_id=data['url_msg_id'][index],
                reply_markup=await back_menu_kb()
            )
            continue
        try:
            logger.info(f'Start Create theses --> {call.from_user.id}')
            list_doc = await create_theses_from_transcription(call.from_user.id, data['format_summary'], decode_path)
            logger.info(f'End Create theses --> {call.from_user.id}')
            await bot.send_message(
                chat_id=call.from_user.id,
                text=f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ <code>{index + 1}</code> –∏–∑ <code>{len(data['url_files'])}</code> –∑–∞–≤–µ—Ä—à–µ–Ω–∞! "
                     f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ.\n\n"
                     f'–û—Å—Ç–∞–ª–æ—Å—å —Å—Å—ã–ª–æ–∫ <code>{len(data["url_files"]) - index - 1}</code>'
            )
            await bot.send_document(
                chat_id=call.from_user.id,
                document=FSInputFile(decode_path),
                caption='<b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ</b>',
                reply_to_message_id=data['url_msg_id'][index]
            )

            for summary_index, doc in enumerate(list_doc):
                await bot.send_document(
                    chat_id=call.from_user.id,
                    document=FSInputFile(doc),
                    caption=f'<b>–¢–µ–∑–∏—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>{data["format_summary"][summary_index]}</code></b>',
                    reply_to_message_id=data['url_msg_id'][index]
                )
                os.remove(doc)
            if index + 1 != len(data['url_files']):
                await bot.send_message(
                    chat_id=call.from_user.id,
                    text=f'<b>–ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ ‚è±Ô∏è</b>'
                )
            await update_user_db(call.from_user.id, {'last_active': datetime.now()}, session_maker)
            await update_minute_db(call.from_user.id,
                                   {'remaining_seconds': user_info.remaining_seconds - data['duration']},
                                   session_maker)
            logger.info(f'End Decoding --> {call.from_user.id}')
        except Exception as _ex:
            logger.error(f'Summary error {_ex} --> go_summary_handler')
            await create_error_db(call.from_user.id, 'GPT url error', 'decoding_audio', str(_ex),
                                  session_maker)
            await bot.send_message(
                chat_id=call.from_user.id,
                text=f'üòî –û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∑–∏—Å–æ–≤ –¥–ª—è —Å—Å—ã–ª–∫–∏ <code>{index + 1}</code>\n\n'
                     "–ù–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å! <b>–ú–∏–Ω—É—Ç—ã –∑–∞ —ç—Ç—É —Å—Å—ã–ª–∫—É</b> —É–∂–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. "
                     "–ê –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏! üöÄ",
                reply_to_message_id=data['url_msg_id'][index],
                reply_markup=await back_menu_kb()
            )
        finally:
            try:
                os.remove(decode_path)
            except Exception as _ex:
                logger.error(f'File already been deleted --> go_summary_handler')
    await call.message.answer(
        text="ü•≥ –í—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ <b>—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã</b>! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –º—ã —Å –≤–∞–º–∏ –∫–æ–º–∞–Ω–¥–∞! üöÄ",
        reply_markup=await end_kb()
    )
    await create_action_db(
        call.from_user.id,
        len(data['url_files']) + len(data['file_id']),
        data['duration'],
        data['lang'],
        data['count_speakers'],
        data['special_words'],
        data['format_decoding'],
        str(data['format_summary']).replace("[", "").replace("]", "").replace("'", ""),
        session_maker
    )
    await state.set_state(FSMStart.start)
    await state.update_data(lang='', count_speakers='', special_words='', path=[], duration=0, file_msg_id=[],
                            file_id=[], url_files=[],
                            format_decoding='–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å —Ç–∞–π–º-–∫–æ–¥–∞–º–∏ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —Å–ø–∏–∫–µ—Ä–æ–≤',
                            format_summary=['–°–∞–º–º–∞—Ä–∏'])


def register_handler(dp: Dispatcher):
    dp.callback_query.register(go_decoding, F.data == 'go_decoding')
