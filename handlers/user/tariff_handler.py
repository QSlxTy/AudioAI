from aiogram import types, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import sessionmaker

from integrations.database.models.tariff import get_all_tariff_db
from keyboards.user.user_keyboard import tariff_list_kb


async def tariff_info_call(call: types.CallbackQuery, state: FSMContext, session_maker: sessionmaker):
    tariffs = await get_all_tariff_db(session_maker)
    string_text = ''
    for tariff in tariffs:
        string_text += f'¬∑–ü–∞–∫–µ—Ç <code>{tariff.tariff_name}</code> –º–∏–Ω—É—Ç: <code>{tariff.price}</code> RUB\n'
    await state.get_data()
    await call.message.answer(
        text="üí° –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç? –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏—Ö –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n\n"
             "–í—Å–µ <b>–∫—É–ø–ª–µ–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã</b> –¥–æ–±–∞–≤—è—Ç—Å—è –∫ –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –±–∞–ª–∞–Ω—Å—É, —á—Ç–æ–±—ã —É –≤–∞—Å –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ –≤—Ä–µ–º—è –¥–ª—è –Ω—É–∂–Ω—ã—Ö –∑–∞–¥–∞—á!\n\n"
             f'{string_text}',
        reply_markup=await tariff_list_kb(session_maker)
    )


async def tariff_info_command(message: types.Message, state: FSMContext, session_maker: sessionmaker):
    tariffs = await get_all_tariff_db(session_maker)
    string_text = ''
    for tariff in tariffs:
        string_text += f'¬∑–ü–∞–∫–µ—Ç <code>{tariff.tariff_name}</code> –º–∏–Ω—É—Ç: <code>{tariff.price}</code> RUB\n'
    await state.get_data()
    await message.answer(
        text="üí° –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç? –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏—Ö –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n\n"
             "–í—Å–µ <b>–∫—É–ø–ª–µ–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã</b> –¥–æ–±–∞–≤—è—Ç—Å—è –∫ –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –±–∞–ª–∞–Ω—Å—É, —á—Ç–æ–±—ã —É –≤–∞—Å –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ –≤—Ä–µ–º—è –¥–ª—è –Ω—É–∂–Ω—ã—Ö –∑–∞–¥–∞—á!\n\n"
             f'{string_text}',
        reply_markup=await tariff_list_kb(session_maker)
    )


def register_handler(dp: Dispatcher):
    dp.callback_query.register(tariff_info_call, F.data == 'check_tariff')
    dp.message.register(tariff_info_command, Command('tarif'))
