from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import sessionmaker

from integrations.database.models.minute import get_minute_db, update_minute_db
from integrations.database.models.promo import get_promo_db, update_promo_db, is_promo_exists_db
from integrations.database.models.used_promo import is_used_promo_exists_db, create_used_promo_db
from keyboards.user.user_keyboard import back_menu_kb, back_tariff_menu_kb
from utils.states.user import FSMPromo


async def menu_promo(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(FSMPromo.menu_promo)
    await call.message.answer(
        text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∞—à <b>–ø—Ä–æ–º–æ–∫–æ–¥</b>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∏–Ω—É—Ç—ã! –ú—ã –ª—é–±–∏–º –¥–µ–ª–∞—Ç—å –≤–∞–º –ø–æ–¥–∞—Ä–∫–∏. üòä",
        reply_markup=await back_tariff_menu_kb()
    )


async def get_promo(message: types.Message, session_maker: sessionmaker):
    if await is_used_promo_exists_db(message.text, message.from_user.id, session_maker):
        await message.answer(
            text="üòÖ –ü–æ—Ö–æ–∂–µ, –≤—ã —É–∂–µ <b>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π!",
            reply_markup=await back_menu_kb()
        )
    else:
        if await is_promo_exists_db(message.text, session_maker):
            promo_info = await get_promo_db({'promo': message.text}, session_maker)
            user_info = await get_minute_db({'telegram_id': message.from_user.id}, session_maker)
            await create_used_promo_db(message.from_user.id, message.text, session_maker)
            await update_minute_db(message.from_user.id,
                                   {'remaining_seconds': user_info.remaining_seconds + promo_info.seconds},
                                   session_maker)
            await update_promo_db(message.text, {'count': promo_info.count - 1}, session_maker)
            await message.answer(
                text=f"üéâ –£—Ä–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{round(promo_info.seconds / 60, 2)} –º–∏–Ω—É—Ç</b> –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å! –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º. ü•∞",
                reply_markup=await back_menu_kb()
            )
        else:
            await message.answer(
                text='<b>üòÖ –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥, –≤–∏–¥–∏–º–æ –µ–≥–æ –Ω–µ—Ç</b>',
                reply_markup=await back_menu_kb()
            )


def register_handler(dp: Dispatcher):
    dp.callback_query.register(menu_promo, F.data == 'go_promo')
    dp.message.register(get_promo, FSMPromo.menu_promo, F.content_type == 'text',~F.text.startswith('/'))
